#!/usr/bin/env python3
"""Main functions that make it do what it do."""

import json
import locale
import sys
import os
import operator
import emails
import reports


def load_data(filename):
    """Load the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
    max_revenue = {"revenue": 0}
    max_sales = {"sales": 0}
    item_in_year = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
        max_revenue = item
    # TODO: also handle max sales
    for item in data:
        item_sales = item["total_sales"]
        if item_sales > max_sales["sales"]:
            item["sales"] = item_sales
            max_sales = item
    # TODO: also handle most popular car_year
    for item in data:
        item_year = item["car"]["car_year"]
        if item_year in item_in_year:
            item_in_year[item_year] += item["total_sales"]
        else:
            item_in_year[item_year] = item["total_sales"]
        pop_year = sorted(list(item_in_year.items()),
                          key=operator.itemgetter(1)).pop()

    summary = ["The {} generated the most revenue:${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
            format_car(max_sales["car"]), max_sales["sales"]),
        "The most popular year was {} with {} sales.".format(
            pop_year[0], pop_year[1])]

    return summary


def cars_dict_to_table(car_data):
    """Turn the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]),
                           item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)
    # TODO: turn this into a PDF report
    report_summary = ""
    for line in summary:
        report_summary += line
        report_summary += '<br/>'
    reports.generate("/tmp/cars.pdf", "Sales summary for last month",
                     report_summary, cars_dict_to_table(data))
    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    recipient = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    att_path = "/tmp/cars.pdf"
    email_summary = ""
    for line in summary:
        email_summary += line + '\n'
    emails.send(emails.generate(sender, recipient, subject,
                                email_summary, att_path))


if __name__ == "__main__":
    main(sys.argv)
